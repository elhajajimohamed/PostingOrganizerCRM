import * as fs from 'fs';

function fixEncodingIssues() {
  try {
    console.log('üîß Starting to fix encoding issues in call-centers-part-1.json...');

    // Read the file
    const data = fs.readFileSync('../../../to be devided/split-files/call-centers-part-1.json', 'utf8');
    let callCenters = JSON.parse(data);

    console.log(`üìä Processing ${callCenters.length} call centers...`);

    let fixedCount = 0;

    // Fix encoding issues
    callCenters = callCenters.map(center => {
      let needsFix = false;
      const fixed = { ...center };

      // Fix common encoding issues - UTF-8 decoding problems
      const encodingMap = {
        // Common broken sequences
        'YaoundAc': 'Yaound√©',
        'FranAaise': 'Fran√ßaise',
        'PrAcsident': 'Pr√©sident',
        'bAtiment': 'b√¢timent',
        'MontAce': 'Mont√©e',
        // Fix incomplete Yaound√© patterns
        'Yaound': 'Yaound√©',
        'Yaounde': 'Yaound√©',
        // Individual character replacements
        '\u00C3\u00A9': '√©', // √É¬© -> √©
        '\u00C3\u00A0': '√†', // √É¬† -> √†
        '\u00C3\u00A8': '√®', // √É¬® -> √®
        '\u00C3\u00A9': '√©', // √É¬© -> √©
        '\u00C3\u00A7': '√ß', // √É¬ß -> √ß
        '\u00C3\u00B9': '√π', // √É¬π -> √π
        '\u00C3\u00A2': '√¢', // √É¬¢ -> √¢
        '\u00C3\u00AA': '√™', // √É¬™ -> √™
        '\u00C3\u00AE': '√Æ', // √É¬Æ -> √Æ
        '\u00C3\u00B4': '√¥', // √É¬¥ -> √¥
        '\u00C3\u00BB': '√ª', // √É¬ª -> √ª
        // Additional common broken chars
        '\u00C2\u00A9': '¬©', // √Ç¬© -> ¬©
        '\u00C2\u00A0': ' ', // √Ç  -> space
        '\u00E2\u20AC': '‚Ç¨', // √¢‚Äö¬¨ -> ‚Ç¨
        '\u00C2\u00AE': '¬Æ', // √Ç¬Æ -> ¬Æ
        '\u00E2\u2019': "'", // √¢¬Ä¬ô -> '
        '\u00E2\u20AC\u0153': '"', // √¢¬Ä¬ú -> "
        '\u00E2\u20AC\u009D': '"', // √¢¬Ä¬ù -> "
      };

      // Fix name
      if (center.name) {
        let fixedName = center.name;
        Object.entries(encodingMap).forEach(([broken, fixedChar]) => {
          if (fixedName.includes(broken)) {
            fixedName = fixedName.replace(new RegExp(broken.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'), fixedChar);
            needsFix = true;
          }
        });
        // Also fix UTF-8 byte sequences
        fixedName = fixedName
          .replace(/\u00C3\u00A9/g, '√©')
          .replace(/\u00C3\u00A0/g, '√†')
          .replace(/\u00C3\u00A8/g, '√®')
          .replace(/\u00C3\u00A7/g, '√ß')
          .replace(/\u00C3\u00B9/g, '√π')
          .replace(/\u00C3\u00A2/g, '√¢')
          .replace(/\u00C3\u00AA/g, '√™')
          .replace(/\u00C3\u00AE/g, '√Æ')
          .replace(/\u00C3\u00B4/g, '√¥')
          .replace(/\u00C3\u00BB/g, '√ª')
          .replace(/\u00C2\u00A9/g, '¬©')
          .replace(/\u00C2\u00A0/g, ' ')
          .replace(/\u00E2\u20AC/g, '‚Ç¨')
          .replace(/\u00C2\u00AE/g, '¬Æ')
          .replace(/\u00E2\u2019/g, "'")
          .replace(/\u00E2\u20AC\u0153/g, '"')
          .replace(/\u00E2\u20AC\u009D/g, '"');
        if (fixedName !== center.name) needsFix = true;
        fixed.name = fixedName;
      }

      // Fix city
      if (center.city) {
        let fixedCity = center.city;
        Object.entries(encodingMap).forEach(([broken, fixedChar]) => {
          if (fixedCity.includes(broken)) {
            fixedCity = fixedCity.replace(new RegExp(broken.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'), fixedChar);
            needsFix = true;
          }
        });
        // Also fix UTF-8 byte sequences
        fixedCity = fixedCity
          .replace(/\u00C3\u00A9/g, '√©')
          .replace(/\u00C3\u00A0/g, '√†')
          .replace(/\u00C3\u00A8/g, '√®')
          .replace(/\u00C3\u00A7/g, '√ß')
          .replace(/\u00C3\u00B9/g, '√π')
          .replace(/\u00C3\u00A2/g, '√¢')
          .replace(/\u00C3\u00AA/g, '√™')
          .replace(/\u00C3\u00AE/g, '√Æ')
          .replace(/\u00C3\u00B4/g, '√¥')
          .replace(/\u00C3\u00BB/g, '√ª')
          .replace(/\u00C2\u00A9/g, '¬©')
          .replace(/\u00C2\u00A0/g, ' ')
          .replace(/\u00E2\u20AC/g, '‚Ç¨')
          .replace(/\u00C2\u00AE/g, '¬Æ')
          .replace(/\u00E2\u2019/g, "'")
          .replace(/\u00E2\u20AC\u0153/g, '"')
          .replace(/\u00E2\u20AC\u009D/g, '"');
        if (fixedCity !== center.city) needsFix = true;
        fixed.city = fixedCity;
      }

      // Fix address
      if (center.address) {
        let fixedAddress = center.address;
        Object.entries(encodingMap).forEach(([broken, fixedChar]) => {
          if (fixedAddress.includes(broken)) {
            fixedAddress = fixedAddress.replace(new RegExp(broken.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'), fixedChar);
            needsFix = true;
          }
        });
        // Also fix UTF-8 byte sequences
        fixedAddress = fixedAddress
          .replace(/\u00C3\u00A9/g, '√©')
          .replace(/\u00C3\u00A0/g, '√†')
          .replace(/\u00C3\u00A8/g, '√®')
          .replace(/\u00C3\u00A7/g, '√ß')
          .replace(/\u00C3\u00B9/g, '√π')
          .replace(/\u00C3\u00A2/g, '√¢')
          .replace(/\u00C3\u00AA/g, '√™')
          .replace(/\u00C3\u00AE/g, '√Æ')
          .replace(/\u00C3\u00B4/g, '√¥')
          .replace(/\u00C3\u00BB/g, '√ª')
          .replace(/\u00C2\u00A9/g, '¬©')
          .replace(/\u00C2\u00A0/g, ' ')
          .replace(/\u00E2\u20AC/g, '‚Ç¨')
          .replace(/\u00C2\u00AE/g, '¬Æ')
          .replace(/\u00E2\u2019/g, "'")
          .replace(/\u00E2\u20AC\u0153/g, '"')
          .replace(/\u00E2\u20AC\u009D/g, '"');
        if (fixedAddress !== center.address) needsFix = true;
        fixed.address = fixedAddress;
      }

      if (needsFix) {
        fixedCount++;
      }

      return fixed;
    });

    // Write back the fixed data
    fs.writeFileSync('../../../to be devided/split-files/call-centers-part-1-fixed.json', JSON.stringify(callCenters, null, 2), 'utf8');

    console.log(`‚úÖ Fixed encoding issues in ${fixedCount} call centers`);
    console.log('üìÅ Fixed file saved as: ../../../to be devided/split-files/call-centers-part-1-fixed.json');

    // Validate the fix
    console.log('üîç Validating the fixed file...');
    const fixedData = fs.readFileSync('../../../to be devided/split-files/call-centers-part-1-fixed.json', 'utf8');
    const parsed = JSON.parse(fixedData);
    console.log(`‚úÖ Validation successful: ${parsed.length} call centers parsed correctly`);

  } catch (error) {
    console.error('‚ùå Error fixing encoding issues:', error);
  }
}

fixEncodingIssues();